<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>git on 飞鸟的博客站</title>
    <link>https://starifly.github.io/categories/git/</link>
    <description>Recent content in git on 飞鸟的博客站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>efim@163.com (飞鸟)</managingEditor>
    <webMaster>efim@163.com (飞鸟)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Thu, 30 Aug 2018 21:48:45 +0800</lastBuildDate>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://starifly.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      
      <item>
        <title>Git分支管理</title>
        <link>https://starifly.github.io/posts/git-branch/</link>
        <pubDate>Thu, 30 Aug 2018 21:48:45 +0800</pubDate>
        <author>efim@163.com (飞鸟)</author>
        <atom:modified>Sun, 02 Sep 2018 00:00:00 +0000</atom:modified>
        <guid>https://starifly.github.io/posts/git-branch/</guid>
        <description>git的分支管理十分强大，本文主要涉及git中分支的查看和最基本的分支管理操作，主要包括分支的创建、切换、合并、衍合以及分支的推送和拉取等。</description>
        <content:encoded>&lt;p&gt;git的分支管理十分强大，本文主要涉及git中分支的查看和最基本的分支管理操作，主要包括分支的创建、切换、合并、衍合以及分支的推送和拉取等。同时还介绍了如何删除本地分支以及远程分支。&lt;/p&gt;
&lt;p&gt;阅读前面的博文有助于理解本文：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《

&lt;a href=&#34;https://starifly.github.io/post/git-base/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git基本操作&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;《

&lt;a href=&#34;https://starifly.github.io/post/git-reset/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git的撤销更改&lt;/a&gt;》&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;查看分支&#34;&gt;查看分支&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//查看当前仓库的分支，分支前的*表示当前所处的分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//查看远程仓库的分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch -r
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//查看所有分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch -a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//查看所有分支和该分支上最后的一次提交
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch -v
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//查看已经合入当前分支的所有分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch --merged
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//查看未被合入分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch --no-merged
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//查看当前分支对应的远程分支（追踪关系）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch -vv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//可视化目前的分支状态
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git log --oneline --graph --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;分支创建和切换&#34;&gt;分支创建和切换&lt;/h2&gt;
&lt;p&gt;我们可以使用&lt;code&gt;git branch &amp;lt;分支名&amp;gt;&lt;/code&gt;命令来创建一个分支，然后使用&lt;code&gt;git checkout &amp;lt;分支名&amp;gt;&lt;/code&gt;来切换分支。&lt;/p&gt;
&lt;p&gt;如果觉得麻烦，我们可以使用一个简便的命令创建并切换到该分支上：&lt;code&gt;git checkout -b &amp;lt;分支名&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也可以使用&lt;code&gt;git checkout -&lt;/code&gt;命令来切换回上一个分支&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分支合并&#34;&gt;分支合并&lt;/h2&gt;
&lt;p&gt;假设当前仓库存在两个分支，我们先切换到master分支，然后通过&lt;code&gt;git merge --no-ff &amp;lt;分支名&amp;gt;&lt;/code&gt;命令将分支合并到master分支上。&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;--no-ff&lt;/code&gt;表示强行关闭fast-forward方式，fast-forward方式表示当条件允许时，git直接把HEAD指针指向合并分支的头，完成合并，这种方式合并速度快，但是在整个过程中没有创建commit，所以如果当我们删除掉这个分支时就再也找不回来了，因此在这里我们将之关闭。&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;git merge&lt;/code&gt;合并分支时出现冲突，先重新编辑冲突文件，编辑完成之后，再执行&lt;code&gt;git add&lt;/code&gt;和&lt;code&gt;git commit&lt;/code&gt;即可。&lt;/p&gt;
&lt;h2 id=&#34;分支衍合&#34;&gt;分支衍合&lt;/h2&gt;
&lt;p&gt;衍合（rebase）又称变基，其实也是分支合并的一种方式，既然也是合并，那它跟上文讲的合并（merge）有什么区别呢？&lt;/p&gt;
&lt;p&gt;假如我们现在有master和experiment两条分支：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://git-scm.com/book/en/v2/images/basic-rebase-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;现在想把experiment分支合并到master分支上来，最容易的方法是 &lt;code&gt;merge&lt;/code&gt; 命令。它会把两个分支的最新快照（C3 和 C4）以及二者最近的共同祖先（C2）进行三方比较合并，合并的结果是生成一个新的快照（并提交）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://git-scm.com/book/en/v2/images/basic-rebase-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其实，还有一种方法：你可以提取在 （C4）中引入的补丁和修改，然后在（C3）的基础上应用一次。 在git中，这种操作就叫做变基。 你可以使用 &lt;code&gt;rebase&lt;/code&gt; 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。&lt;/p&gt;
&lt;p&gt;具体做法：&lt;/p&gt;
&lt;p&gt;1.检出experiment分支，对master进行衍合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout experiment
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git rebase master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖先（C2），然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底（C3）, 最后以此将之前另存为临时文件的修改依序应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://git-scm.com/book/en/v2/images/basic-rebase-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看出，在衍合得过程中，experiment分支会丢弃现有的提交（C4），然后相应地新建一些内容一样但实际上不同的提交（C4’）。&lt;/p&gt;
&lt;p&gt;2.再回到master分支，进行一次快进合并&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git merge experiment
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://git-scm.com/book/en/v2/images/basic-rebase-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在衍合过程中有可能会发生冲突，方案有两种：一种是通过&lt;code&gt;git rebase --abort&lt;/code&gt;命令直接退回到之前的状态，另一种就是解决冲突继续合并。&lt;/p&gt;
&lt;p&gt;解决冲突后，要&lt;code&gt;git add&lt;/code&gt;冲突的文件，标识冲突解决，然后再执行&lt;code&gt;git rebase --continue&lt;/code&gt;，注意&lt;code&gt;git add&lt;/code&gt;后不要执行&lt;code&gt;git commit&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;分支的推送和拉取&#34;&gt;分支的推送和拉取&lt;/h2&gt;
&lt;p&gt;git push与git pull是一对推送/拉取分支的git命令。&lt;br /&gt;
&lt;strong&gt;git push 使用本地的对应分支来更新对应的远程分支。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。&lt;/p&gt;
&lt;p&gt;如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，这条命令是删除远程master分支。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push origin :&amp;lt;分支名&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//等同于
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin --delete &amp;lt;分支名&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果当前分支与远程分支之间存在追踪关系（即分支名相同），则本地分支和远程分支都可以省略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push origin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面命令表示，将当前分支推送到origin主机的对应分支。&lt;/p&gt;
&lt;p&gt;如果当前分支只有一个追踪分支，那么主机名都可以省略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用&lt;code&gt;git push&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push -u origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用&lt;code&gt;git push&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;不带任何参数的&lt;code&gt;git push&lt;/code&gt;，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用&lt;code&gt;git config&lt;/code&gt;命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git config --global push.default matching
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//或者
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git config --global push.default simple
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更详细的push.default属性，请参考《

&lt;a href=&#34;https://segmentfault.com/a/1190000002783245&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git push与pull的默认行为&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push --all origin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面命令表示，将所有本地分支都推送到origin主机。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git pull 取回远程主机某个分支的更新，再与本地的指定分支合并。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt;与&lt;code&gt;git push&lt;/code&gt;操作的目的相同，但是操作的目标相反。命令格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git pull &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git pull origin master:my-test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的命令是将origin厂库的master分支拉取并合并到本地的my-test分支上。&lt;/p&gt;
&lt;p&gt;如果省略本地分支，则将自动合并到当前所在分支上。如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git pull origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在某些场合，git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在&lt;code&gt;git clone&lt;/code&gt;的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。&lt;/p&gt;
&lt;p&gt;以下也能自动建立追踪关系：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检出时：&lt;code&gt;git checkout -b master origin/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;推送时：&lt;code&gt;git push -u origin &amp;lt;远程分支名&amp;gt;&lt;/code&gt;或&lt;code&gt;git push --set-upstream origin &amp;lt;远程分支名&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，上述使用的前提：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;检出的本地分支必须和远程分支同名才能自动建立追踪关系&lt;/li&gt;
&lt;li&gt;推送时，如果远程没有同名关联分支，则会推送失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;git也允许手动建立追踪关系。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git branch --set-upstream master origin/next
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面命令指定master分支追踪origin/next分支。&lt;/p&gt;
&lt;p&gt;如果当前分支与远程分支存在追踪关系，&lt;code&gt;git pull&lt;/code&gt;就可以省略远程分支名。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git pull origin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”(remote-tracking branch)进行合并。&lt;/p&gt;
&lt;p&gt;如果当前分支只有一个追踪分支，连远程主机名都可以省略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git pull
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面命令表示，当前分支自动与唯一一个追踪分支进行合并。&lt;/p&gt;
&lt;p&gt;如果合并需要采用rebase模式，可以使用&lt;code&gt;--rebase&lt;/code&gt;选项。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git pull --rebase &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;分支的删除&#34;&gt;分支的删除&lt;/h2&gt;
&lt;p&gt;有时候当我们完成功能等分支的开发时，我们会把它合并到上一层分支，此时我们不再需要这个功能分支了，我们可以通过&lt;code&gt;git branch -d &amp;lt;分支名&amp;gt;&lt;/code&gt;来删除它。&lt;/p&gt;
&lt;p&gt;实际上，对分支的删除只是删除的指向该commit号的指针，并不会删除其相关的提交号, 在日志中仍然可以找到之前的commit记录，也仍然可以在该commit上创建新的分支。&lt;/p&gt;
&lt;p&gt;如果你还想删除远程分支，要使用&lt;code&gt;git push origin --delete &amp;lt;分支名&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;a href=&#34;https://segmentfault.com/a/1190000011927868#articleHeader5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://segmentfault.com/a/1190000011927868#articleHeader5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;

&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;

&lt;a href=&#34;https://www.yiibai.com/git/git_push.html#article-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.yiibai.com/git/git_push.html#article-start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;

&lt;a href=&#34;https://www.yiibai.com/git/git_pull.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.yiibai.com/git/git_pull.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        <dc:creator>starifly</dc:creator>
        
        
        
        
          
            
              <category>git</category>
            
          
        
        
            
              <category>[git]</category>
            
        
        
      </item>
      
      <item>
        <title>Git的撤销更改</title>
        <link>https://starifly.github.io/posts/git-reset/</link>
        <pubDate>Wed, 29 Aug 2018 13:20:00 +0800</pubDate>
        <author>efim@163.com (飞鸟)</author>
        <atom:modified>Sun, 09 Sep 2018 00:00:00 +0000</atom:modified>
        <guid>https://starifly.github.io/posts/git-reset/</guid>
        <description>&lt;p&gt;前文《

&lt;a href=&#34;https://starifly.github.io/post/git-base/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git基本操作&lt;/a&gt;》介绍了Git的基本概念和一些基本操作。&lt;/p&gt;
&lt;p&gt;本文将介绍Git四个阶段的撤销更改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作区的代码撤销&lt;/li&gt;
&lt;li&gt;add到暂存区的代码想撤销&lt;/li&gt;
&lt;li&gt;提交到本地仓库的代码想撤销&lt;/li&gt;
&lt;li&gt;推送到远程仓库的代码想撤销&lt;/li&gt;
&lt;/ul&gt;</description>
        <content:encoded>&lt;p&gt;前文《

&lt;a href=&#34;https://starifly.github.io/post/git-base/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git基本操作&lt;/a&gt;》介绍了Git的基本概念和一些基本操作。&lt;/p&gt;
&lt;p&gt;本文将介绍Git四个阶段的撤销更改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作区的代码撤销&lt;/li&gt;
&lt;li&gt;add到暂存区的代码想撤销&lt;/li&gt;
&lt;li&gt;提交到本地仓库的代码想撤销&lt;/li&gt;
&lt;li&gt;推送到远程仓库的代码想撤销&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工作区代码的撤销&#34;&gt;工作区代码的撤销&lt;/h2&gt;
&lt;p&gt;如果我们在工作区修改了文件，状态会变为Modified，这时忽然发现写错了想回到一开始未修改状态，愚蠢的办法是打开文件一个一个的去恢复，其实可以通过&lt;code&gt;git checkout .&lt;/code&gt;命令来一键撤销工作区的代码修改，&lt;br /&gt;
当然也可以通过&lt;code&gt;git checkout -- &amp;lt;filename&amp;gt;&lt;/code&gt;命令来指定撤销的文件。&lt;/p&gt;
&lt;h2 id=&#34;add到暂存区的代码想撤销&#34;&gt;add到暂存区的代码想撤销&lt;/h2&gt;
&lt;p&gt;如果&lt;code&gt;add&lt;/code&gt;到了暂存区，你发现了错误想要撤销，可以执行以下两个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git reset HEAD&lt;/code&gt; or &lt;code&gt;git reset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同以上&amp;rsquo;工作区代码撤销&#39;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;的参数，其值可以是hard、mixed及soft，mixed实现的是&lt;code&gt;add&lt;/code&gt;后的回撤，上文中关于暂存未提交回撤中的&lt;code&gt;git reset&lt;/code&gt;其实就是默认用的mixed参数，soft请听下文分解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三者的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模式&lt;/th&gt;
&lt;th&gt;HEAD的位置&lt;/th&gt;
&lt;th&gt;索引&lt;/th&gt;
&lt;th&gt;工作树&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;soft&lt;/td&gt;
&lt;td&gt;修改&lt;/td&gt;
&lt;td&gt;不修改&lt;/td&gt;
&lt;td&gt;不修改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mixed&lt;/td&gt;
&lt;td&gt;修改&lt;/td&gt;
&lt;td&gt;修改&lt;/td&gt;
&lt;td&gt;不修改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hard&lt;/td&gt;
&lt;td&gt;修改&lt;/td&gt;
&lt;td&gt;修改&lt;/td&gt;
&lt;td&gt;修改&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;提交到本地仓库的代码想撤销&#34;&gt;提交到本地仓库的代码想撤销&lt;/h2&gt;
&lt;p&gt;如果执行了&lt;code&gt;git commit&lt;/code&gt;命令把代码提交到了本地仓库，如果你后悔了，怎么办？不要着急，同样也可以撤销。&lt;/p&gt;
&lt;p&gt;有以下两种情形：&lt;/p&gt;
&lt;h3 id=&#34;回撤到指定版本号&#34;&gt;回撤到指定版本号&lt;/h3&gt;
&lt;p&gt;可以利用&lt;code&gt;git reset --hard &amp;lt;版本号&amp;gt;&lt;/code&gt;命令来实现版本回退，该命令中的版本号有几种不同的写法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.可以使用HEAD^来描述版本，一个^表示前一个版本，两个^^表示前两个版本，以此类推。&lt;br /&gt;
2.也可以使用数字来代替^，比如说前100个版本可以写作HEAD~100。&lt;br /&gt;
3.也可以直接写版本号，表示跳转到某一个版本处（通过&lt;code&gt;git log&lt;/code&gt;查看当前提交日志）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;回撤到add之后未commit之前的状态&#34;&gt;回撤到add之后未commit之前的状态&lt;/h3&gt;
&lt;p&gt;soft实现的是&lt;code&gt;commit&lt;/code&gt;之后回撤到&lt;code&gt;add&lt;/code&gt;之后未&lt;code&gt;commit&lt;/code&gt;之前的状态，所以，像在&lt;code&gt;commit&lt;/code&gt;之后发现少提交了一个文件等场景下，我们可以利用&lt;code&gt;git reset --soft HEAD^&lt;/code&gt;命令来回撤。&lt;/p&gt;
&lt;h2 id=&#34;push到远程仓库的代码想撤销&#34;&gt;push到远程仓库的代码想撤销&lt;/h2&gt;
&lt;p&gt;有时，在&lt;code&gt;git push&lt;/code&gt;之后，才发现还有一些代码需要进行很小的改动，这些改动在原则上不应该作为一次新的提交。&lt;br /&gt;
这时，我们需要撤销这次推送(&lt;code&gt;git push&lt;/code&gt;)与提交(&lt;code&gt;git commit&lt;/code&gt;)，然后进行代码修改，再重新进行提交和推送。&lt;/p&gt;
&lt;p&gt;为了实现这个目的，需要进行三步操作:&lt;/p&gt;
&lt;h3 id=&#34;1撤销提交信息&#34;&gt;1.撤销提交信息&lt;/h3&gt;
&lt;p&gt;通过执行&lt;code&gt;git reset --soft &amp;lt;版本号&amp;gt;&lt;/code&gt;重置至指定版本的提交，达到撤销提交的目的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参数soft指的是：保留当前工作区，以便重新提交。&lt;br /&gt;
还可以选择参数hard，会撤销相应工作区的修改，而且有可能意外造成代码丢失，所以一定要谨慎使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后，通过&lt;code&gt;git log&lt;/code&gt;确认是否成功撤销。&lt;/p&gt;
&lt;h3 id=&#34;2撤销&#34;&gt;2.撤销&lt;/h3&gt;
&lt;p&gt;通过&lt;code&gt;git push origin master --force&lt;/code&gt;强制提交当前版本号，以达到撤销版本号的目的。&lt;/p&gt;
&lt;p&gt;当他人在仓库的远程副本的同一分支上进行改动后，会发生强制推送的风险。当你强制推送已重写的历史记录时，某些提交将会丢失。这是&lt;code&gt;git push --force-with-lease&lt;/code&gt;出现的原因 - 如果远程分支已更新，它不会允许你执行强制推送，这将确保你不会丢弃他人的工作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;必须添加参数force进行强制提交，否则会提交失败，并报错。&lt;br /&gt;
报错原因：本地项目版本号低于远端仓库版本号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3修改代码重新提交和推送&#34;&gt;3.修改代码，重新提交和推送&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//修改代码，添加修改
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//重新提交
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//重新推送
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;a href=&#34;https://segmentfault.com/a/1190000011910766&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git中的各种后悔药&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
        <dc:creator>starifly</dc:creator>
        
        
        
        
          
            
              <category>git</category>
            
          
        
        
            
              <category>[git]</category>
            
        
        
      </item>
      
      <item>
        <title>Git基本操作</title>
        <link>https://starifly.github.io/posts/git-base/</link>
        <pubDate>Sat, 25 Aug 2018 22:16:03 +0800</pubDate>
        <author>efim@163.com (飞鸟)</author>
        <atom:modified>Sat, 08 Sep 2018 00:00:00 +0000</atom:modified>
        <guid>https://starifly.github.io/posts/git-base/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://starifly.github.io/images/git-base.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
        <content:encoded>&lt;p&gt;&lt;img src=&#34;https://starifly.github.io/images/git-base.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;
&lt;h3 id=&#34;4个区&#34;&gt;4个区&lt;/h3&gt;
&lt;p&gt;如上图所示，git有4个区，和svn有很大的不同，git中引入了暂存区/缓存区(Stage/Index)的概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作区(Workspace)&lt;/li&gt;
&lt;li&gt;暂存区(Stage/Index)&lt;/li&gt;
&lt;li&gt;本地仓库(Repository)&lt;/li&gt;
&lt;li&gt;远程仓库(Remote)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在svn中我们都是直接将文件提交到版本仓库中去，而在git中，则多了一层关卡。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作区很好理解，就是我们能看到的工作目录，就是本地的文件夹。&lt;br /&gt;
工作区最原始的状态是未修改状态(Origin)，如果修改了某些文件就会变成已修改(Modified)。&lt;br /&gt;
我们要通过&lt;code&gt;git add&lt;/code&gt;命令先将他们添加到暂存区中，这时就会产生已暂存(Staged)状态。&lt;br /&gt;
&lt;code&gt;git commit&lt;/code&gt;命令则可以将暂存区中的文件提交到本地仓库中去，状态变为已提交(Committed)。&lt;br /&gt;
最后通过&lt;code&gt;git push&lt;/code&gt;推送到远程仓库，推送成功状态变为已推送(Pushed)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;
&lt;h3 id=&#34;仓库初始化&#34;&gt;仓库初始化&lt;/h3&gt;
&lt;p&gt;仓库的初始化有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种是直接从远程仓库克隆&lt;/li&gt;
&lt;li&gt;另一种则是直接从当前目录初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从当前目录初始化的方式很简单，直接执行如下命令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行完成后当前目录下会多出一个.git的隐藏文件夹，所有git需要的数据和资源都存放在该目录中。&lt;/p&gt;
&lt;p&gt;然后正常的&lt;code&gt;add&lt;/code&gt;和&lt;code&gt;commit&lt;/code&gt;之后，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote add origin &amp;lt;url&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push -u origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看仓库状态&#34;&gt;查看仓库状态&lt;/h3&gt;
&lt;p&gt;可以通过&lt;code&gt;git status&lt;/code&gt;命令来查看仓库中文件的状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git status -s&lt;/code&gt; : 文件状态的简写（M - 修改， A - 添加， D - 删除， R - 重命名，?? - 未追踪）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;提交命令&#34;&gt;提交命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一种是直接通过&lt;code&gt;git commit -m &amp;quot;备注信息&amp;quot;&lt;/code&gt;命令&lt;/li&gt;
&lt;li&gt;如果要写的备注很多，可以通过&lt;code&gt;git commit&lt;/code&gt;来打开指定编辑器，然后在编辑器中输入备注信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在.gitconfig文件中 [core] 段中加上 editor=vim来修改git提交信息到编辑器为vim&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://starifly.github.io/images/git-commit.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如图所示，在vim编辑器中按照既定的格式编辑内容，编辑完成后保存退出，此时文件就commit成功了。如果临时改变主意不想提交了，删除备注信息后保存退出，&lt;br /&gt;
此时提交就会终止。&lt;/p&gt;
&lt;p&gt;提交成功之后，我们可以通过如下命令重新编辑上次提交的备注信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git commit --amend
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看提交日志&#34;&gt;查看提交日志&lt;/h3&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;git log&lt;/code&gt; 命令来查看历史提交。&lt;code&gt;git log&lt;/code&gt; 命令因为其后边参数的多样性，使用起来是比较灵活而强大的，并且比较实用。&lt;br /&gt;
下面列车一些常用的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;git log&lt;/code&gt;命令我们可以查看以往仓库中提交的日志&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git log --abbrev-commit&lt;/code&gt;命令缩短版本号&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git log --pretty=short&lt;/code&gt;命令查询简略信息&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git log --stat&lt;/code&gt;命令查看简化版的diff日志信息&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git log --name-only&lt;/code&gt;命令仅在提交信息后显示已修改的文件清单&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git log --name-status&lt;/code&gt;命令显示新增、修改、删除的文件清单&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git log --relative-date&lt;/code&gt;命令显示较短的相对时间&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;git log&lt;/code&gt;后面加上文件名查看指定文件的提交日志，如果还想查看提交时文件的变化，加上-p参数即可。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git log -p -1&lt;/code&gt;来查看最近一次提交的差异&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;git log --graph&lt;/code&gt;命令可以让log以更直观的方式来展示&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我们还可以使用&lt;code&gt;git log --pretty&lt;/code&gt;来定义显示格式，如：&lt;code&gt;git log --graph --pretty=format:&amp;quot;%h - %an, %ar : %s&amp;quot;&lt;/code&gt;， &amp;ndash;pretty=format:后边跟着的是格式化的字符串。&lt;br /&gt;
其中 %h 表示简化版的Hash值， %an 表示作者名字（Author Name）, %ar 表示多久以前提交的，%s 则是提交信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;查看更改前后的差异&#34;&gt;查看更改前后的差异&lt;/h3&gt;
&lt;p&gt;已修改，未暂存&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;git diff&lt;/code&gt;命令我们可以查看工作区和暂存区的差异。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;已暂存，未提交&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们执行&lt;code&gt;git add .&lt;/code&gt;把修改提交到暂存区，然后再执行&lt;code&gt;git diff&lt;/code&gt;，你会发现没有任何信息输出。这说明&lt;code&gt;git diff&lt;/code&gt;这个命令只检查我们的工作区和暂存区之间的差异。&lt;br /&gt;
如果我们想看到暂存区和本地仓库之间的差异，就需要加一个参数&lt;code&gt;git diff --cached&lt;/code&gt;。&lt;br /&gt;
或者通过命令&lt;code&gt;git diff HEAD&lt;/code&gt;来查看（实际上是工作区与当前分支最近一次commit之间的差异）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;已提交，未推送&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在，如果通过命令&lt;code&gt;git commit&lt;/code&gt;把修改从暂存区提交到本地仓库，然后再执行git diff &amp;ndash;cached，没有差异，执行&lt;code&gt;git diff master origin/master&lt;/code&gt;，可以看到差异&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;删除文件&#34;&gt;删除文件&lt;/h3&gt;
&lt;p&gt;当我们需要删除工作区和暂存区上的文件，可以执行&lt;code&gt;git rm &amp;lt;filename&amp;gt;&lt;/code&gt;命令，该命令等同于以下两个命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//直接在文件管理器中把文件删了
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ rm file
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//提交到工作区
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git add file //或者 git rm file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当我们希望某个文件不被版本控制，但是本地又需要使用，可以使用&lt;code&gt;git rm --cached &amp;lt;filename&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;重命名&#34;&gt;重命名&lt;/h3&gt;
&lt;p&gt;可以通过&lt;code&gt;git mv &amp;lt;SourceFile&amp;gt; &amp;lt;RenameFile&amp;gt;&lt;/code&gt;命令将SourceFile重命名为RenameFile，该命令等同于以下三个命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mv SourceFile RenameFile
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git rm SourceFile
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git add RenameFile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;git-add--n&#34;&gt;git add -N&lt;/h3&gt;
&lt;p&gt;你可以用&lt;code&gt;git add -N &amp;lt;filename&amp;gt;&lt;/code&gt;（“通知”）来告诉Git你想把新添加的文件包含在提交中在你第一次实际提交之前，使用该命令之后执行&lt;code&gt;git diff&lt;/code&gt;命令就可以查看到更改。&lt;/p&gt;
&lt;h3 id=&#34;git-add--p&#34;&gt;git add -p&lt;/h3&gt;
&lt;p&gt;交互式提交，询问你是否愿意将它提交，跳过，或者推迟决定（还有其他一些更强大的选项，你可以通过在运行这命令后选择？来查看）。&lt;code&gt;git add -p&lt;/code&gt;是一个神奇的工具来生产结构良好的提交。&lt;/p&gt;
&lt;h3 id=&#34;git-checkout--p&#34;&gt;git checkout -p&lt;/h3&gt;
&lt;p&gt;与&lt;code&gt;git add -p&lt;/code&gt;类似，&lt;code&gt;git checkout&lt;/code&gt;命令将使用 &lt;code&gt;--patch&lt;/code&gt; 或 &lt;code&gt;-p&lt;/code&gt; 选项，这会使 git 在本地工作副本中展示每个“大块”的改动，并允许丢弃对应改动 —— 简单地说就是恢复本地工作副本到你改变之前的状态。&lt;/p&gt;
&lt;h3 id=&#34;压缩提交历史&#34;&gt;压缩提交历史&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git rebase -i&lt;/code&gt;命令可以实现提交历史的压缩。比如我们在开发某一个功能时，提交了很多次，当所有功能都写完时，想将这些提交压缩为一个，就可以使用该命令。&lt;/p&gt;
&lt;p&gt;如：通过执行&lt;code&gt;git rebase -i HEAD~2&lt;/code&gt;命令来压缩前两个版本的提交历史，会自动打开一个vim编辑器，压缩之后，最新一次的提交日志就没了，但是数据还在。&lt;/p&gt;
&lt;h3 id=&#34;基于时间修改的指南&#34;&gt;基于时间修改的指南&lt;/h3&gt;
&lt;p&gt;这个功能在某些时候会变得十分有用，比如当你处理最新出现的 bug，自言自语道：“这个功能明明昨天还是好好的，到底又改了些什么”，不用盯着满屏的 git 日志的输出试图弄清楚什么时候更改了提交，您只需运行&lt;code&gt;git diff HEAD@{yesterday}&lt;/code&gt;，会看到从昨天以来的所有修改，这也适用于较长的时间段（例如 &lt;code&gt;git diff HEAD@{&#39;2 months ago&#39;}&lt;/code&gt;） ，以及一个确切的日期（例如&lt;code&gt;git diff HEAD@{&#39;2010-01-01 12:00:00&#39;}&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;您还可以将这些基于日期的修改参数与使用修正参数的任何 Git 子命令一起使用。在 gitrevisions 手册页中有关于具体使用哪种格式的详细信息。&lt;/p&gt;
&lt;h3 id=&#34;全知的-reflog&#34;&gt;全知的 reflog&lt;/h3&gt;
&lt;p&gt;你是不是试过在 rebase 时干掉过某次提交，后来又发现你需要保留这次提交的一些东西？你可能觉得这些提交的东西已经永远找不回来了，只能从头再来了。其实不然，但如果你在本地工作副本中提交了，提交就会进入到 &amp;ldquo;引用日志&amp;rdquo; ，你仍然可以访问到。&lt;/p&gt;
&lt;p&gt;运行 git reflog 将在本地工作副本中显示当前分支的所有活动的列表，并为您提供每个提交的 SHA1 值。一旦发现你 rebase 时放弃的那个提交，你可以运行 git checkout &lt;SHA1&gt; 来检出该次提交，复制好你需要的信息，然后再运行 git checkout HEAD 返回到分支最新的提交去。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;a href=&#34;https://mp.weixin.qq.com/s/S1T4wy3srmLvXgIjvpVEwg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mp.weixin.qq.com/s/S1T4wy3srmLvXgIjvpVEwg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;

&lt;a href=&#34;https://opensource.com/article/18/4/git-tips&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://opensource.com/article/18/4/git-tips&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;extended&#34;&gt;Extended&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;a href=&#34;https://segmentfault.com/a/1190000011972502&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git关联远程仓库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;

&lt;a href=&#34;https://segmentfault.com/a/1190000011979949&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git工作区储藏兼谈分支管理中的一个小问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;

&lt;a href=&#34;https://segmentfault.com/a/1190000011995630&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git标签管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;

&lt;a href=&#34;https://blog.csdn.net/wzwdcld/article/details/80782561&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;git生成ssh key 避免每次push都要输入账号密码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;

&lt;a href=&#34;https://www.jianshu.com/p/471c9537f45a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;你可能不知道的关于 Git stash 的技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
        <dc:creator>starifly</dc:creator>
        
        
        
        
          
            
              <category>git</category>
            
          
        
        
            
              <category>[git]</category>
            
        
        
      </item>
      
      <item>
        <title>git add -A 和 git add . 的区别</title>
        <link>https://starifly.github.io/posts/git-add-difference/</link>
        <pubDate>Thu, 23 Aug 2018 20:18:10 +0800</pubDate>
        <author>efim@163.com (飞鸟)</author>
        <atom:modified>Thu, 23 Aug 2018 20:18:10 +0800</atom:modified>
        <guid>https://starifly.github.io/posts/git-add-difference/</guid>
        <description>&lt;p&gt;git add -A、git add .和git add -u在功能上看似相近，但是有细微的差别，而且功能会随着git版本的不同而不同。&lt;/p&gt;</description>
        <content:encoded>&lt;p&gt;git add -A、git add .和git add -u在功能上看似相近，但是有细微的差别，而且功能会随着git版本的不同而不同。&lt;/p&gt;
&lt;h2 id=&#34;区别&#34;&gt;区别&lt;/h2&gt;
&lt;p&gt;Git Version 1.x:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://starifly.github.io/images/git-add-difference-01.jpg&#34; alt=&#34;&#34; title=&#34;Git Version 1.x&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Git Version 2.x:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://starifly.github.io/images/git-add-difference-02.jpg&#34; alt=&#34;&#34; title=&#34;Git Version 2.x&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;git add -A就不用介绍了，它在任何情况下都是包括所有的变动。&lt;/li&gt;
&lt;li&gt;git add .在git版本是2.x的时候等同于git add -A，而当版本是1.x的时候&lt;strong&gt;不包括被删除的文件&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;git add -u仅监控已经被add的文件（即tracked file），&lt;strong&gt;不会提交新文件（untracked file）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希望本文对你有所帮助。&lt;/p&gt;</content:encoded>
        <dc:creator>starifly</dc:creator>
        
        
        
        
          
            
              <category>git</category>
            
          
        
        
            
              <category>[git]</category>
            
        
        
      </item>
      
      <item>
        <title>Git 和 GitHub简易入门</title>
        <link>https://starifly.github.io/posts/git-intro/</link>
        <pubDate>Wed, 15 Aug 2018 21:51:39 +0800</pubDate>
        <author>efim@163.com (飞鸟)</author>
        <atom:modified>Wed, 15 Aug 2018 21:51:39 +0800</atom:modified>
        <guid>https://starifly.github.io/posts/git-intro/</guid>
        <description>开始 拖延症与强迫症严重一直拖到了今天2月23号才开始写。这一段时间我也明白了博客最重要的是keep blogging,所以 想到什么就写什么，没</description>
        <content:encoded>&lt;h2 id=&#34;开始&#34;&gt;开始&lt;/h2&gt;
&lt;p&gt;拖延症与强迫症严重一直拖到了今天2月23号才开始写。这一段时间我也明白了博客最重要的是&lt;code&gt;keep blogging&lt;/code&gt;,所以 想到什么就写什么，没有什么东西一次就能写的完美。这次我准备简单介绍一下当前非常火的代码托管与社会协作开发平台&amp;ndash;

&lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github&lt;/a&gt; 和版本控制系统&amp;ndash;

&lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;git&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;为什么推荐gitgithub&#34;&gt;为什么推荐git&amp;amp;github?&lt;/h2&gt;
&lt;p&gt;你所知道的几乎所有很火的开源软件都能在github上面找到源代码。对于使用R软件的，你会发现

&lt;a href=&#34;https://github.com/yihui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;谢益辉&lt;/a&gt;的开发的R包都在github上面，还有

&lt;a href=&#34;https://github.com/hadley&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hadley Wickham&lt;/a&gt;&amp;ndash;

&lt;a href=&#34;http://cos.name/2015/09/hadley-wickham-the-man-who-revolutionized-r/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一个改变了R的人&lt;/a&gt; 的全部R包都在他的github主页上面。Github上面不仅有这些大神级的人物存在，也有不少小牛们，今天看到了一个非常炫的可视化主页，大家点开看肯定会被astonished的，网址在

&lt;a href=&#34;http://hafen.github.io/htmlwidgetsgallery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Github上面还有各种当下最流行是算法包，比如

&lt;a href=&#34;https://github.com/dmlc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DMLC&lt;/a&gt; 里的

&lt;a href=&#34;http://cos.name/2015/03/xgboost/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xgboost&lt;/a&gt; 打破kaggle竞赛Python垄断的局面; 

&lt;a href=&#34;https://github.com/dmlc/mxnet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mxnet&lt;/a&gt;基于GPU的深度学习算法，

&lt;a href=&#34;http://www.infoq.com/cn/articles/use-mxnet-in-deep-learning-part01&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一个例子&lt;/a&gt; 详细了解请看这篇cos访谈：

&lt;a href=&#34;http://cos.name/2015/06/interview-of-tianqi/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;陈天奇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总的来说github就是一个巨大的宝库，去上面看看能让我们能紧跟时代潮流，通过查看源代码以及贡献代码(pull request)来实现学习与提高。这么好的东西，良心小赵会私藏吗？当然会无私的与你们分享。&lt;/p&gt;
&lt;p&gt;Git是个一个优秀的版本控制系统，开源中国给出

&lt;a href=&#34;http://www.oschina.net/question/28_37438&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;八大理由&lt;/a&gt;使用Git.相比于其他的版本控制系统Git的优势有人总结过，我当然没有人家写的好，所有就贴上

&lt;a href=&#34;http://blog.csdn.net/dengsilinming/article/details/7999188&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;链接&lt;/a&gt;,供大家参考。&lt;/p&gt;
&lt;h2 id=&#34;简单入门&#34;&gt;简单入门&lt;/h2&gt;
&lt;h3 id=&#34;协作与进步&#34;&gt;协作与进步&lt;/h3&gt;
&lt;p&gt;小赵第一次注册Github是2014年的暑假，没错，那个暑假也就是我考研的暑假，大学的最后一个暑假 &amp;#x1f62d; . 这个也是我在考研的时候弄的杂七杂八的事情之一，当时对Github完全没有概念，懵逼的状态。一直到了2015年9月份看了几篇写博客的各种好处的软文，才开始用起了这个账户。想知道如何用Github Pages &amp;amp; Jekyll搭建个人博客请自行搜索这个方面的文章。小赵到现在也是用了大半年了，算是基本入门了。我的主页在这里:

&lt;a href=&#34;https://github.com/BruceZhaoR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/BruceZhaoR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github上面有一个organisation，可以进行团队开发与协作，这也是我萌发建立

&lt;a href=&#34;http://bzrlc.github.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R共享学习社区&lt;/a&gt;的初衷。毕竟一个人的精力是有限的，多人合作才能发挥巨大作用。只需要加入这个组织，然后把自己学习的笔记、心得什么的以markdown的形式提交到上面去，后来人看到了这些无疑是巨大的帮助而且省时省力。当然也欢迎大家投稿(txt,word,markdown,Rmarkdown,html&amp;hellip;)，我会将其挂到学习社区的主页博客上面，这样你的文章不仅可以作为自己的备忘(等你哪天忘记了就可以到网上来看看自己当初是怎么做的)，而且还能帮助其他人。&lt;/p&gt;
&lt;h3 id=&#34;拥有一个github账号&#34;&gt;拥有一个Github账号&lt;/h3&gt;
&lt;p&gt;前面说了这么多，相信大家已经对Github有了初步的了解。接下来你只需要用你的常用邮箱注册一个Github账号就可以开始了。网址在这里：

&lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;几点说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contributions你贡献的仓库/项目&lt;/li&gt;
&lt;li&gt;repository就是一个仓库，用于存放代码、文件之类&lt;/li&gt;
&lt;li&gt;Origanizations 你所属的组织&lt;/li&gt;
&lt;li&gt;点击右上角的 + 来新建一个repository吧，取名 hello-world .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建新的repository的时候，一般会要你选择是否要README和license，我一般都选。License的区别看

&lt;a href=&#34;http://git.oschina.net/oschina/git-osc/wikis/License&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;. GitHub公共(public)的仓库是免费的,private仓库是收费的，反正目前我们也用不到private的仓库。最后你需要点击右上角你的头像-&amp;gt;settings,来进行一些基本的设置。首先是你的profile，然后是通知设置，建议全部勾选；关于SSH Keys下面就要说到；security里面有一个两步验证，感觉目前还是用不到的。&lt;/p&gt;
&lt;p&gt;至此，你已经拥有了Github账号了，你可以去这里

&lt;a href=&#34;https://github.com/explore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;explore&lt;/a&gt;流行的项目,或者在这里来看

&lt;a href=&#34;https://github.com/trending&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;趋势&lt;/a&gt;,最近流行什么项目；当然不能少了R相关的资料,点击查看github上面

&lt;a href=&#34;http://www.r-pkg.org/starred&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;流行的R包&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;简单提高&#34;&gt;简单提高&lt;/h2&gt;
&lt;h3 id=&#34;git安装&#34;&gt;Git安装&lt;/h3&gt;
&lt;p&gt;Github最近添加了上传文件的功能，至此方便了不少不会git的用户。但是为了发挥Github的优势，还是需要去用git的。关于git网上有很多的快速教程命令，这里推荐官方的教程

&lt;a href=&#34;http://git-scm.com/book/zh/v2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git Pro v2.0-zh&lt;/a&gt;，可以系统了解git及其基本特性。下载就去官方网站

&lt;a href=&#34;http://git-scm.com/downloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://git-scm.com/downloads&lt;/a&gt; 默认安装就行了(选第一个-&amp;gt;下一步就行了)。&lt;/p&gt;
&lt;p&gt;安装完成后，右键你会发现多了两个选项，git bash here和git GUI here。现在就可以使用git了。git是可以离线使用的，等你有网了，就可以push到Github上面，实现同步。&lt;/p&gt;
&lt;p&gt;关于git教程 随便搜一搜就有的，这里墙裂推荐这个

&lt;a href=&#34;http://rogerdudler.github.io/git-guide/index.zh.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网址1&lt;/a&gt;,

&lt;a href=&#34;http://www.cnblogs.com/fengyv/archive/2014/06/16/3791588.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网址2&lt;/a&gt;.再就是：

&lt;a href=&#34;http://roclinux.cn/?p=213&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;看日记学git&lt;/a&gt; 和 

&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;廖雪峰git教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;小赵告诉你，新手其实只需会git的“三板斧”足矣。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git clone 

&lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:账户名/repository&lt;/li&gt;
&lt;li&gt;git add .&lt;/li&gt;
&lt;li&gt;git commit -m &amp;ldquo;随便说点什么&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等你有网了，需要同步了，你只需要 &lt;code&gt;git push&lt;/code&gt;,就可以将本地文件同步到了Github上面了.Github上面的公开的项目任何人都是可以下载的，为了确保你的repository只能由你来管理，需要在自己的电脑里面设置ssh key，让Git与Github之间的连接起来,下面就要讲到SSH Key的生成与添加。&lt;/p&gt;
&lt;h3 id=&#34;ssh-keys&#34;&gt;SSH Keys&lt;/h3&gt;
&lt;p&gt;Github上面有一篇

&lt;a href=&#34;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方教程&lt;/a&gt;，虽然是全英文的，但是不影响使用,打开Git,照着上面敲一敲代码就ok了。这里小赵总结一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1. $ ssh-keygen -t rsa -C &lt;span class=&#34;s2&#34;&gt;&amp;#34;你注册用的邮箱&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2. 一路&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;Enter&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;下去
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3. $ &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#确认ssh-agent可用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4. $ ssh-add ~/.ssh/id_rsa &lt;span class=&#34;c1&#34;&gt;#添加到ssh-agent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;5. $ clip &amp;lt; ~/.ssh/id_rsa.pub &lt;span class=&#34;c1&#34;&gt;#复制到粘贴板&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来需要去

&lt;a href=&#34;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;,按照步骤将ssh key添加到github账户。添加完成后，需要测试一下是否连接成功：&lt;code&gt;ssh -T git@github.com&lt;/code&gt; .顺利的话就将会看到这样的一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi 你的用户名! You&amp;rsquo;ve successfully authenticated, but GitHub does not provide shell access.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一个小例子&#34;&gt;一个小例子&lt;/h3&gt;
&lt;p&gt;弄到了这一步也是不容易，下面简单介绍一下git的使用方法。现假设你在github上面已经建立了hello-world这个repository，里面有一个README和License文件。在一个文件夹里面，右键&lt;code&gt;git bash here&lt;/code&gt;,然后输入下面的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 全局设置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git config --global user.name &lt;span class=&#34;s2&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git config --global user.email &lt;span class=&#34;s2&#34;&gt;&amp;#34;user email&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# github网页端同步到本地&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git clone git@github.com:你的用户名/hello-world.git 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; hello-world
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个时候你可以打开hello-world文件夹，然后打开README，用txt打开。这里小赵建议是去下个notepad++ 来打开。然后你可以随便写点上面东西。这个是markdown的格式，关于markdown基本语法看

&lt;a href=&#34;https://help.github.com/articles/basic-writing-and-formatting-syntax/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&amp;amp;FurtherReading&lt;/a&gt;。修改后，保存然后去git里面输入:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git status &lt;span class=&#34;c1&#34;&gt;#查看状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git add .  &lt;span class=&#34;c1&#34;&gt;#暂存文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git status
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;update README&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#commit以后就可以提交了&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push &lt;span class=&#34;c1&#34;&gt;# 提交到github&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里就简单写一个例子，更多的请见上面提到的教程。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;看一遍，再操作一遍应该就能掌握基本的使用。然后教程刷一遍，就算是入门了。下篇小赵将总结git常用的操作。&lt;/p&gt;
</content:encoded>
        <dc:creator>Bruce Zhao</dc:creator>
        
        
        
        
          
            
              <category>git</category>
            
          
        
        
            
              <category>[git]</category>
            
        
        
      </item>
      

    
  </channel>
</rss>
