<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>cross compile on 飞鸟的博客站</title>
    <link>https://starifly.github.io/categories/cross-compile/</link>
    <description>Recent content in cross compile on 飞鸟的博客站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>efim@163.com (飞鸟)</managingEditor>
    <webMaster>efim@163.com (飞鸟)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 17 Aug 2018 17:04:47 +0800</lastBuildDate>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://starifly.github.io/categories/cross-compile/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      
      <item>
        <title>一套交叉编译脚本</title>
        <link>https://starifly.github.io/posts/a-promising-cross-compile-framework/</link>
        <pubDate>Fri, 17 Aug 2018 17:04:47 +0800</pubDate>
        <author>efim@163.com (飞鸟)</author>
        <atom:modified>Sun, 19 Aug 2018 00:00:00 +0000</atom:modified>
        <guid>https://starifly.github.io/posts/a-promising-cross-compile-framework/</guid>
        <description>&lt;p&gt;现在移动平台非常火热，我们在使用C/C++开发一些移动应用的时候，经常可能需要将一些第三方c/c++库编译成对应的iOS/Android/WP/Tizen上面的静态库。&lt;br /&gt;
之前我介绍过

&lt;a href=&#34;http://zilongshanren.com/blog/2014-09-01-how-to-use-cmake-to-compile-static-library.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何使用CMake来编译跨平台库&lt;/a&gt;。&lt;br /&gt;
那种方法有一个局限性，它只针对一些提供了CMake支持或者源码本身不需要configure的库来说，使用会非常方便，但是如果库本身没有提供CMake或者&lt;br /&gt;
在编译之前需要configure的库，使用起来就会很麻烦了。最好的做法，其实是重用它本身提供的编译系统，然后提供交叉编译所需要的一些参数即可。&lt;/p&gt;</description>
        <content:encoded>&lt;p&gt;现在移动平台非常火热，我们在使用C/C++开发一些移动应用的时候，经常可能需要将一些第三方c/c++库编译成对应的iOS/Android/WP/Tizen上面的静态库。&lt;br /&gt;
之前我介绍过

&lt;a href=&#34;http://zilongshanren.com/blog/2014-09-01-how-to-use-cmake-to-compile-static-library.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何使用CMake来编译跨平台库&lt;/a&gt;。&lt;br /&gt;
那种方法有一个局限性，它只针对一些提供了CMake支持或者源码本身不需要configure的库来说，使用会非常方便，但是如果库本身没有提供CMake或者&lt;br /&gt;
在编译之前需要configure的库，使用起来就会很麻烦了。最好的做法，其实是重用它本身提供的编译系统，然后提供交叉编译所需要的一些参数即可。&lt;/p&gt;
&lt;h2 id=&#34;问题描述&#34;&gt;问题描述&lt;/h2&gt;
&lt;p&gt;对于提供了configure/make/make install编译系统的库来说，交叉编译只需要指定&amp;ndash;build, &amp;ndash;host，然后提供CC,CXX,AR,LD,RANLIB,STRIP等编译所需要的变量，最后可能还需要指定arch，CFLAGS，CXXFLAGS和LDFLAGS即可。&lt;/p&gt;
&lt;p&gt;而对于提供了CMake支持的库来说，我们只需要为CMake提供一个交叉编译所需要的toolchain文件即可。一般来说，一个CMake的toolchain文件如下所示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# CMake Toolchain file for crosscompiling on ARM.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# This can be used when running cmake in the following way:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#  cd build/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#  cmake .. -DCMAKE_TOOLCHAIN_FILE=../cross-arm-linux-gnueabihf.cmake
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CROSS_PATH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gcc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linaro&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gnueabihf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2013.02&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20130221&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_linux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# Target operating system name.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CMAKE_SYSTEM_NAME&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Linux&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# Name of C compiler.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CMAKE_C_COMPILER&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;${CROSS_PATH}/bin/arm-linux-gnueabihf-gcc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CMAKE_CXX_COMPILER&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;${CROSS_PATH}/bin/arm-linux-gnueabihf-g++&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# Where to look for the target environment. (More paths can be added here)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CMAKE_FIND_ROOT_PATH&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;${CROSS_PATH}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# Adjust the default behavior of the FIND_XXX() commands:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# search programs in the host environment only.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CMAKE_FIND_ROOT_PATH_MODE_PROGRAM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NEVER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;# Search headers and libraries in the target environment only.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CMAKE_FIND_ROOT_PATH_MODE_LIBRARY&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ONLY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里重要的是指定编译器，sysroot和编译时的CFLAGS，CXXFLAGS等参数。具体就不在这里展开了。&lt;/p&gt;
&lt;p&gt;为什么我要研究这些东西呢？因为cocos2d-x现在依赖20多个第三方库，如果全部采用源码的形式，那开发编译的时间会变得非常长。为了减少编译等待时间，我们一般会把第三方库事先编译好，形成一堆.a文件。然后在程序运行的时候，指定链接参数给链接器就ok了。&lt;/p&gt;
&lt;p&gt;但是，目前我们这些库都是临时编译的。当时编译的脚本没有保留下来了，也就是不清楚编译时候所指定的参数。&lt;br /&gt;
另外，编译各个平台下面的静态库，这本身也不是一件简单的事。如果没有相关经验，可能会无从下手。所以，我们为了解决这个问题，现在新建了一个仓库

&lt;a href=&#34;https://github.com/cocos2d/cocos2d-x-3rd-party-libs-src&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cocos2d-x-3rd-party-libs-src&lt;/a&gt;. 这个仓库会把cocos2d-x所需要编译的第三方库的编译脚本全部保存在这里，如果哪一天，我们需要升级第三方库，或者发现现有的第三方库有问题，也可以从编译脚本找问题。&lt;/p&gt;
&lt;h2 id=&#34;交叉编译一般步骤&#34;&gt;交叉编译一般步骤&lt;/h2&gt;
&lt;p&gt;一般来讲，我们编译一个第三方库有以下几个步骤。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载第三方库的源码（一般下载稳定版本）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阅读它自带的Install或者Readme文件，看看如何在本机上编译这个库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在本机上不能顺利编译的，可能需要自己给第三方库写patch，这样做的好处是，下次别人下载这个库，只要应用你的patch就可以顺利编译了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定交叉编译器，sysroot, CFLAGS, CXXFLAG等参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;./configure, make, make install就搞定了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一套成形的脚本看起来，大概是

&lt;a href=&#34;https://github.com/minggo/png/blob/master/build_libpng.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这样子的&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;解决办法&#34;&gt;解决办法&lt;/h2&gt;
&lt;p&gt;如果我们为每一个库都编写这样一套脚本，那会显得非常浪费。因为基本上每个平台的脚本都大同小异，如果可以把共用的部分抽取出来就最好了。&lt;br /&gt;
要抽取出公共的部分其实是有难度的，但是世界上做这件事情的人绝对不只你一个。本着不重复造轮子的原则，我们直接把

&lt;a href=&#34;https://github.com/videolan/vlc/tree/master/contrib/src&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VLC&lt;/a&gt;&lt;br /&gt;
所使用的编译系统拿来改造一下就ok啦。&lt;/p&gt;
&lt;p&gt;这套系统主要组成如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;它有一个bootstrap脚本，主要用来配置一些交叉编译的平台参数，如果是Android，则需要指定NDK路径，ANDROID ABI和ANDROID API的版本，是否使用neon等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一堆rules.mk文件，每一个第三库都会编译一个rules.mk文件，用来指定交叉编译时的参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个SHA512SUMS文件，主要用来对下载的第三库进行md5的验证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一些patch，这部分是可选的。当下载的第三方库在编译时遇到困难时可能需要自己编译一些patch.编写patch非常简单，使用git diff &amp;gt; xxx.patch即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体的文档介绍，请看

&lt;a href=&#34;https://github.com/cocos2d/cocos2d-x-3rd-party-libs-src/blob/master/contrib/src/README&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;README文件&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;编译链接这件事情，其实我之前是没有整得非常清楚的。尤其是configure, make, makefile, cmake这些东西。通过这次折腾这堆编译脚本，我学到了很多东西，对编译链接理解地更加深入了。&lt;br /&gt;
另外，我觉得在做任何一件比较棘手的事情之前，先想想是否别人也会遇到同样的问题。他们是怎么解决的，站在巨人的肩膀上会看得更远。&lt;br /&gt;
还有，Don&amp;rsquo;t repeat yourself!&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;

&lt;a href=&#34;http://www.jfranken.de/homepages/johannes/vortraege/make.en.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction to making makefile&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;

&lt;a href=&#34;http://www.gnu.org/software/make/manual/make.html#Overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GNU make reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;

&lt;a href=&#34;https://github.com/videolan/vlc/tree/master/contrib/src&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VLC github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;a href=&#34;https://zilongshanren.com/blog/2014-11-02-a-promising-cross-compile-framework.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;阅读原文&lt;/a&gt;&lt;/p&gt;</content:encoded>
        <dc:creator>0owen</dc:creator>
        
        
        
        
        
            
              <category>[cross compile]</category>
            
        
        
      </item>
      

    
  </channel>
</rss>
